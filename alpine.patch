--- org/build/moz.configure/rust.configure
+++ new/build/moz.configure/rust.configure
@@ -192,7 +192,8 @@
 
         # Check to see whether our rustc has a reasonably functional stdlib
         # for our chosen target.
-        target_arg = '--target=' + rustc_target.alias
+        # target_arg = '--target=' + rustc_target.alias
+        target_arg = '--target=x86_64-alpine-linux-musl'
         in_fd, in_path = mkstemp(prefix='conftest', suffix='.rs')
         out_fd, out_path = mkstemp(prefix='conftest', suffix='.rlib')
         os.close(out_fd)
@@ -237,8 +238,11 @@
 rust_target_triple = rust_triple_alias(target)
 rust_host_triple = rust_triple_alias(host)
 
-set_config('RUST_TARGET', rust_target_triple)
-set_config('RUST_HOST_TARGET', rust_host_triple)
+# set_config('RUST_TARGET', rust_target_triple)
+# set_config('RUST_HOST_TARGET', rust_host_triple)
+
+set_config('RUST_TARGET','x86_64-alpine-linux-musl')
+set_config('RUST_HOST_TARGET', 'x86_64-alpine-linux-musl')
 
 
 @depends(rust_target_triple)
--- org/config/system-headers.mozbuild
+++ new/config/system-headers.mozbuild
@@ -229,7 +229,6 @@
     'execinfo.h',
     'extras.h',
     'fcntl.h',
-    'features.h',
     'fenv.h',
     'ffi.h',
     'fibdef.h',
@@ -878,7 +877,6 @@
     'sys/stat.h',
     'sys/statvfs.h',
     'sys/syscall.h',
-    'sys/sysctl.h',
     'sys/sysinfo.h',
     'sys/sysmacros.h',
     'sys/sysmp.h',
--- org/extensions/spellcheck/hunspell/src/moz.build
+++ new/extensions/spellcheck/hunspell/src/moz.build
@@ -19,7 +19,7 @@
 
 # This variable is referenced in configure.in.  Make sure to change that file
 # too if you need to change this variable.
-DEFINES['HUNSPELL_STATIC'] = True
+DEFINES['HUNSPELL_STATIC'] = False
 
 FINAL_LIBRARY = 'xul'
 
--- org/gfx/ycbcr/moz.build
+++ new/gfx/ycbcr/moz.build
@@ -52,7 +52,7 @@
         'yuv_row_other.cpp',
     ]
 
-if CONFIG['CPU_ARCH'] == 'arm' and CONFIG['HAVE_ARM_NEON']:
+if CONFIG['HAVE_ARM_NEON']:
     SOURCES += [
         'yuv_row_arm.s',
     ]
--- org/js/src/threading/posix/Thread.cpp
+++ new/js/src/threading/posix/Thread.cpp
@@ -194,8 +194,10 @@
   rv = 0;
 #elif defined(__NetBSD__)
   rv = pthread_setname_np(pthread_self(), "%s", (void*)name);
-#else
+#elif defined(__GLIBC__)
   rv = pthread_setname_np(pthread_self(), name);
+#else
+  rv = 0;
 #endif
   MOZ_RELEASE_ASSERT(!rv);
 }
--- org/media/audioipc/audioipc/src/cmsg.rs
+++ new/media/audioipc/audioipc/src/cmsg.rs
@@ -108,6 +108,7 @@
 
             let cmsghdr = cmsghdr {
                 cmsg_len: cmsg_len as _,
+                __pad1: 0,
                 cmsg_level: level,
                 cmsg_type: kind,
             };
--- org/media/webrtc/signaling/src/sdp/sipcc/sdp_os_defs.h
+++ new/media/webrtc/signaling/src/sdp/sipcc/sdp_os_defs.h
@@ -20,8 +20,5 @@
 typedef uint8_t    tinybool;
 typedef unsigned short ushort;
 typedef unsigned long  ulong;
-#ifndef __GNUC_STDC_INLINE__
-#define inline
-#endif
 
 #endif /* _SDP_OS_DEFS_H_ */
--- org/media/webrtc/trunk/webrtc/system_wrappers/source/cpu_features_linux.c
+++ new/media/webrtc/trunk/webrtc/system_wrappers/source/cpu_features_linux.c
@@ -11,7 +11,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <features.h>
-#if __GLIBC_PREREQ(2, 16)
+#if defined(__GLIBC_PREREQ) // && __GLIBC_PREREQ(2, 16)
 #include <sys/auxv.h>
 #else
 #include <fcntl.h>
--- /dev/null
+++ new/mozconfig
@@ -0,0 +1,7 @@
+# My first mozilla config
+ac_add_options --host=x86_64-alpine-linux-musl
+ac_add_options --target=x86_64-alpine-linux-musl
+ac_add_options --enable-debug-symbols
+mk_add_options MOZ_MAKE_FLAGS="-j4"
+ac_add_options BINDGEN_CFLAGS='-I/usr/include/nspr -I/usr/include/pixman-1'
+
--- org/mozglue/misc/StackWalk.cpp
+++ new/mozglue/misc/StackWalk.cpp
@@ -32,13 +32,7 @@
 #define MOZ_STACKWALK_SUPPORTS_MACOSX 0
 #endif
 
-#if (defined(linux) && \
-     ((defined(__GNUC__) && (defined(__i386) || defined(PPC))) || \
-      defined(HAVE__UNWIND_BACKTRACE)))
-#define MOZ_STACKWALK_SUPPORTS_LINUX 1
-#else
 #define MOZ_STACKWALK_SUPPORTS_LINUX 0
-#endif
 
 #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 1)
 #define HAVE___LIBC_STACK_END 1
--- org/mozilla-config.h.in
+++ new/mozilla-config.h.in
@@ -44,7 +44,7 @@
  * HUNSPELL_STATIC is defined in extensions/spellcheck/hunspell/src/Makefile.in,
  * unless --enable-system-hunspell is defined.
  */
-#if defined(HUNSPELL_STATIC)
+#if 0
 #include "hunspell_alloc_hooks.h"
 #include "hunspell_fopen_hooks.h"
 #endif
--- org/security/manager/ssl/nsNSSIOLayer.cpp
+++ new/security/manager/ssl/nsNSSIOLayer.cpp
@@ -46,6 +46,8 @@
 #include "sslproto.h"
 #include "sslexp.h"
 
+#define SSL_ENABLE_TLS13_COMPAT_MODE 35
+
 using namespace mozilla;
 using namespace mozilla::psm;
 
--- org/security/sandbox/chromium/sandbox/linux/seccomp-bpf/trap.cc
+++ new/security/sandbox/chromium/sandbox/linux/seccomp-bpf/trap.cc
@@ -25,6 +25,11 @@
 #include "sandbox/linux/system_headers/linux_seccomp.h"
 #include "sandbox/linux/system_headers/linux_signal.h"
 
+// musl libc defines siginfo_t __si_fields instead of _sifields
+#if defined(OS_LINUX) && !defined(__GLIBC__)
+#define _sifields __si_fields
+#endif
+
 namespace {
 
 struct arch_sigsys {
--- org/toolkit/crashreporter/google-breakpad/src/common/linux/dump_symbols.cc
+++ new/toolkit/crashreporter/google-breakpad/src/common/linux/dump_symbols.cc
@@ -46,6 +46,7 @@
 #include <sys/mman.h>
 #include <sys/stat.h>
 #include <unistd.h>
+#include <libgen.h>
 
 #include <iostream>
 #include <set>
@@ -938,10 +939,10 @@
 // Return the non-directory portion of FILENAME: the portion after the
 // last slash, or the whole filename if there are no slashes.
 string BaseFileName(const string &filename) {
-  // Lots of copies!  basename's behavior is less than ideal.
-  char* c_filename = strdup(filename.c_str());
-  string base = basename(c_filename);
-  free(c_filename);
+  // basename's behavior is less than ideal so avoid it
+  const char *c_filename = filename.c_str();
+  const char *p = strrchr(c_filename, '/');
+  string base = p ? p+1 : c_filename;
   return base;
 }
 
--- org/toolkit/crashreporter/google-breakpad/src/common/moz.build
+++ new/toolkit/crashreporter/google-breakpad/src/common/moz.build
@@ -18,7 +18,7 @@
     ]
 
 if CONFIG['OS_ARCH'] == 'Linux':
-    HOST_DEFINES['HAVE_A_OUT_H'] = True
+    HOST_DEFINES['HAVE_A_OUT_H'] = False
 elif CONFIG['OS_ARCH'] == 'Darwin':
     HOST_DEFINES['HAVE_MACH_O_NLIST_H'] = True
     HOST_SOURCES += [
--- org/toolkit/crashreporter/google-breakpad/src/common/stabs_reader.cc
+++ new/toolkit/crashreporter/google-breakpad/src/common/stabs_reader.cc
@@ -41,6 +41,11 @@
 
 #include "common/using_std_string.h"
 
+#ifndef N_UNDF
+#define N_UNDF 0
+#endif
+
+
 using std::vector;
 
 namespace google_breakpad {
--- org/toolkit/crashreporter/google-breakpad/src/common/stabs_reader.h
+++ new/toolkit/crashreporter/google-breakpad/src/common/stabs_reader.h
@@ -55,7 +55,7 @@
 
 #ifdef HAVE_MACH_O_NLIST_H
 #include <mach-o/nlist.h>
-#elif defined(HAVE_A_OUT_H)
+#elif 0
 #include <a.out.h>
 #endif
 
--- /dev/null
+++ new/toolkit/crashreporter/google-breakpad/src/stab.h
@@ -0,0 +1,71 @@
+/*	$OpenBSD: stab.h,v 1.3 2003/06/02 19:34:12 millert Exp $	*/
+/*	$NetBSD: stab.h,v 1.4 1994/10/26 00:56:25 cgd Exp $	*/
+
+/*-
+ * Copyright (c) 1991 The Regents of the University of California.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. Neither the name of the University nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ *
+ *	@(#)stab.h	5.2 (Berkeley) 4/4/91
+ */
+
+#ifndef _STAB_H_
+#define _STAB_H_
+
+/*
+ * The following are symbols used by various debuggers and by the Pascal
+ * compiler.  Each of them must have one (or more) of the bits defined by
+ * the N_STAB mask set.
+ */
+
+#define	N_GSYM		0x20	/* global symbol */
+#define	N_FNAME		0x22	/* F77 function name */
+#define	N_FUN		0x24	/* procedure name */
+#define	N_STSYM		0x26	/* data segment variable */
+#define	N_LCSYM		0x28	/* bss segment variable */
+#define	N_MAIN		0x2a	/* main function name */
+#define	N_PC		0x30	/* global Pascal symbol */
+#define	N_RSYM		0x40	/* register variable */
+#define	N_SLINE		0x44	/* text segment line number */
+#define	N_DSLINE	0x46	/* data segment line number */
+#define	N_BSLINE	0x48	/* bss segment line number */
+#define	N_SSYM		0x60	/* structure/union element */
+#define	N_SO		0x64	/* main source file name */
+#define	N_LSYM		0x80	/* stack variable */
+#define	N_BINCL		0x82	/* include file beginning */
+#define	N_SOL		0x84	/* included source file name */
+#define	N_PSYM		0xa0	/* parameter variable */
+#define	N_EINCL		0xa2	/* include file end */
+#define	N_ENTRY		0xa4	/* alternate entry point */
+#define	N_LBRAC		0xc0	/* left bracket */
+#define	N_EXCL		0xc2	/* deleted include file */
+#define	N_RBRAC		0xe0	/* right bracket */
+#define	N_BCOMM		0xe2	/* begin common */
+#define	N_ECOMM		0xe4	/* end common */
+#define	N_ECOML		0xe8	/* end common (local name) */
+#define	N_LENG		0xfe	/* length of preceding entry */
+
+#endif /* !_STAB_H_ */
--- org/toolkit/crashreporter/google-breakpad/src/third_party/lss/linux_syscall_support.h
+++ new/toolkit/crashreporter/google-breakpad/src/third_party/lss/linux_syscall_support.h
@@ -1210,6 +1210,12 @@
 #ifndef __NR_fallocate
 #define __NR_fallocate          285
 #endif
+
+#undef __NR_pread
+#define __NR_pread __NR_pread64
+#undef __NR_pwrite
+#define __NR_pwrite __NR_pwrite64
+
 /* End of x86-64 definitions                                                 */
 #elif defined(__mips__)
 #if _MIPS_SIM == _MIPS_SIM_ABI32
--- org/toolkit/mozapps/update/common/updatedefines.h
+++ new/toolkit/mozapps/update/common/updatedefines.h
@@ -100,7 +100,7 @@
 
 #ifdef SOLARIS
 # include <sys/stat.h>
-#else
+#elif !defined(__linux__) || defined(__GLIBC__)
 # include <fts.h>
 #endif
 # include <dirent.h>
--- org/toolkit/mozapps/update/updater/updater.cpp
+++ new/toolkit/mozapps/update/updater/updater.cpp
@@ -3902,6 +3902,7 @@
 int add_dir_entries(const NS_tchar *dirpath, ActionList *list)
 {
   int rv = OK;
+#if !defined(__linux__) || defined(__GLIBC__)
   FTS *ftsdir;
   FTSENT *ftsdirEntry;
   mozilla::UniquePtr<NS_tchar[]> searchpath(get_full_path(dirpath));
@@ -4005,6 +4006,7 @@
   }
 
   fts_close(ftsdir);
+#endif
 
   return rv;
 }
--- org/tools/profiler/core/platform-linux-android.cpp
+++ new/tools/profiler/core/platform-linux-android.cpp
@@ -67,6 +67,8 @@
 #include <string.h>
 #include <list>
 
+#define gettid() syscall(SYS_gettid)
+
 using namespace mozilla;
 
 /* static */ int
@@ -546,9 +548,11 @@
 void
 Registers::SyncPopulate()
 {
+#if defined(__GLIBC__)
   if (!getcontext(&sSyncUContext)) {
     PopulateRegsFromContext(*this, &sSyncUContext);
   }
+#endif
 }
 #endif
 
--- org/tools/profiler/core/platform.h
+++ new/tools/profiler/core/platform.h
@@ -44,13 +44,15 @@
 
 // We need a definition of gettid(), but glibc doesn't provide a
 // wrapper for it.
-#if defined(__GLIBC__)
+#if defined(__linux__)
 #include <unistd.h>
+#if !defined(__BIONIC__)
 #include <sys/syscall.h>
 static inline pid_t gettid()
 {
   return (pid_t) syscall(SYS_gettid);
 }
+#endif
 #elif defined(GP_OS_darwin)
 #include <unistd.h>
 #include <sys/syscall.h>
--- org/tools/profiler/lul/LulElf.cpp
+++ new/tools/profiler/lul/LulElf.cpp
@@ -53,6 +53,7 @@
 #include <sys/stat.h>
 #include <unistd.h>
 #include <arpa/inet.h>
+#include <libgen.h>
 
 #include <set>
 #include <string>
@@ -487,10 +488,10 @@
 // Return the non-directory portion of FILENAME: the portion after the
 // last slash, or the whole filename if there are no slashes.
 string BaseFileName(const string &filename) {
-  // Lots of copies!  basename's behavior is less than ideal.
-  char *c_filename = strdup(filename.c_str());
-  string base = basename(c_filename);
-  free(c_filename);
+  // basename's behavior is less than ideal so avoid it
+  const char *c_filename = filename.c_str();
+  const char *p = strrchr(c_filename, '/');
+  string base = p ? p+1 : c_filename;
   return base;
 }
 
--- org/tools/profiler/lul/LulMain.cpp
+++ new/tools/profiler/lul/LulMain.cpp
@@ -34,6 +34,10 @@
 // Set this to 1 for verbose logging
 #define DEBUG_MAIN 0
 
+#include <unistd.h>
+#include <sys/syscall.h>
+#define gettid() syscall(SYS_gettid)
+
 namespace lul {
 
 using std::string;
--- org/xpcom/base/nsMemoryReporterManager.cpp
+++ new/xpcom/base/nsMemoryReporterManager.cpp
@@ -161,6 +161,7 @@
 }
 
 #ifdef HAVE_MALLINFO
+#ifdef __GLIBC__
 #define HAVE_SYSTEM_HEAP_REPORTER 1
 static MOZ_MUST_USE nsresult
 SystemHeapSize(int64_t* aSizeOut)
@@ -180,6 +181,7 @@
     *aSizeOut = size_t(info.hblkhd) + size_t(info.uordblks);
     return NS_OK;
 }
+#endif
 #endif
 
 #elif defined(__DragonFly__) || defined(__FreeBSD__) \
